generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  password    String
  phoneNumber String        @unique
  role        UserRole      @default(Customer) // Admin, Customer, Driver
  createdBy   UserCreatedBy @default(Manual) // Social, Manual
  fcmToken    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  drivers   Driver[]
  customers Customer[]

  @@map("users")
}

// otp model 
model OTP {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String?   @unique
  email       String?   @unique
  otpCode     String
  expiry      DateTime

  @@map("otps")
}

// notifications model
model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String?
  senderId   String?
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notifications")
}

// Driver model
model Driver {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @unique @db.ObjectId
  name              String
  profileImage      String
  nationalIdFront   String?
  nationalIdBack    String?
  licenseFront      String?
  licenseBack       String?
  insurance         Boolean           @default(false)
  insuranceFront    String?
  insuranceBack     String?
  totalEarnings     Float             @default(0) //Total earnings of the driver 
  stripeAccountId   String?           @unique
  stripeAccountLink String?
  accountStatus     UserAccountStatus @default(Pending) // Pending, Processing, Verified

  // Relationships
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trips                  Trip[]
  driverTripApplications DriverTripApplication[]
  payments               Payment[]

  @@map("drivers")
}

// Customer model
model Customer {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  userId           String            @unique @db.ObjectId
  name             String
  profileImage     String
  companyName      String?
  accountStatus    UserAccountStatus @default(Verified) // Pending, Processing, Verified
  stripeCustomerId String?           @unique
  paymentMethodId  String?

  // Relationships
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trips    Trip[]
  payments Payment[]

  @@map("customers")
}

// Trip model
model Trip {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  loadLocation      String
  unloadLocation    String
  customerId        String            @db.ObjectId
  truckId           String            @db.ObjectId
  truck             Truck             @relation(fields: [truckId], references: [id])
  date              DateTime
  time              String
  productType       String
  productDetails    String?
  paymentMethodType PaymentMethodType @default(Online) // Online or Offline
  totalCost         Float
  distance          Float
  weight            Float
  tripStatus        TripStatus        @default(Pending)

  // Completed, Pending, Assigned, Cancelled, Confirmed
  assignedDriverId   String?  @db.ObjectId
  tags               String[]
  cancellationReason String?

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id])
  driver   Driver?  @relation(fields: [assignedDriverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driverTripApplications DriverTripApplication[]
  payments               Payment[]

  @@map("trips")
}

// Truck model
model Truck {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  length    Float
  width     Float
  height    Float
  type      String
  capacity  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trips Trip[]

  @@map("trucks")
}

// DriverTripApplication model
model DriverTripApplication {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  tripId   String @db.ObjectId
  driverId String @db.ObjectId

  // Relationships
  trip   Trip   @relation(fields: [tripId], references: [id])
  driver Driver @relation(fields: [driverId], references: [id])

  status DriverTripApplicationStatus @default(Applied)
  // Applied, Assigned, Rejected, Cancelled, Confirmed, Completed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tripId, driverId])
  @@map("driver_trip_applications")
}

// Payment model
model Payment {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  customerId       String? @db.ObjectId
  stripeCustomerId String?

  driverId             String?       @db.ObjectId
  tripId               String        @unique @db.ObjectId
  paymentIntentId      String?       @unique
  paymentMethodId      String?
  amount               Float
  applicationFeeAmount Float?
  status               PaymentStatus @default(Pending) // Pending, Completed, Cencelled 
  timestamp            DateTime      @default(now())

  // Relationships
  customer Customer? @relation(fields: [customerId], references: [id])
  driver   Driver?   @relation(fields: [driverId], references: [id])
  trip     Trip      @relation(fields: [tripId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  Pending
  Confirmed
  Cancelled
}

enum DriverTripApplicationStatus {
  Applied
  Assigned
  Rejected
  Cancelled
  Confirmed
  Completed
}

enum UserRole {
  Admin
  Customer
  Driver
}

enum PaymentMethodType {
  Online
  Offline
}

enum UserStatus {
  Pending
  Processing
  Verified
}

enum UserCreatedBy {
  Social
  Manual
}

enum UserAccountStatus {
  Pending
  Processing
  Verified
}

enum TripStatus {
  Completed
  Pending
  Assigned
  Cancelled
  Confirmed
}
